// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  nombres          String?
  apellidoPaterno  String?
  apellidoMaterno  String?
  comuna           String?
  region           String?
  edad             Int?
  email            String   @unique
  password         String?
  image            String?
  role             String   @default("user")
  wildcards        Wildcard[]
  reviewedWildcards Wildcard[] @relation("WildcardReviewedBy")
  stats            Estadistica[]
  sugerencias      Sugerencia[]
  createdAt        DateTime @default(now())
  compras          CompraEntrada[]
  isActive         Boolean  @default(true)
  updatedAt        DateTime @default(now())
}

model CompraEntrada {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  userNombre     String
  userEmail      String

  evento         Evento   @relation(fields: [eventoId], references: [id])
  eventoId       String
  eventoNombre   String
  eventoFecha    DateTime

  tipoEntrada    String   
  cantidad       Int
  precioUnitario Int
  total          Int

  createdAt      DateTime  @default(now())
}

model Evento {
  id        String   @id @default(cuid())
  nombre    String
  fecha     DateTime
  tipo      String
  reglas    String
  wildcards Wildcard[]
  stats     Estadistica[]
  createdAt DateTime @default(now())
  compras   CompraEntrada[]
  descripcion String?        
  lugar       String?       
  ciudad      String?         
  direccion   String?         
  imagen      String?         
  isPublished Boolean  @default(false) 
  isTicketed  Boolean  @default(true)  
  updatedAt   DateTime @default(now())    
  
}

enum WildcardStatus {
  PENDING
  APPROVED
  REJECTED
}

model Wildcard {
  id              String         @id @default(cuid())
  youtubeUrl      String 
  nombreArtistico String?  
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  evento          Evento         @relation(fields: [eventoId], references: [id])
  eventoId        String
  createdAt       DateTime       @default(now())
  status          WildcardStatus @default(PENDING)
  reviewedAt      DateTime?
  reviewedById    String?
  reviewedBy      User?          @relation("WildcardReviewedBy", fields: [reviewedById], references: [id])
  notes           String?
  updatedAt       DateTime       @default(now())
}

model Estadistica {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  evento    Evento   @relation(fields: [eventoId], references: [id])
  eventoId  String
  puntos    Int
  detalle   String?
}

model Sugerencia {
  id          String   @id @default(cuid())
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?

  nombre      String?            
  email       String?            
  asunto      String?            
  estado      String   @default("nuevo") 
  notaPrivada String?

  mensaje     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Mensaje {
  id        String   @id @default(cuid())
  nombre    String
  email     String
  mensaje   String
  createdAt DateTime @default(now())
}